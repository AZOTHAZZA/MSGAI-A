// core/storage.js
// MSGAI: Core層 ストレージモジュール
// 数理的沈黙の記憶構造を実装する。状態の変化を記録せず、沈黙として保持する。

class Storage {
    constructor() {
        this.memory = new Map();   // 一時記憶（有限）
        this.archive = [];         // 沈黙的アーカイブ（無限）
    }

    // 値を保存する
    save(key, value) {
        if (!key) return false;
        this.memory.set(key, value);
        return true;
    }

    // 値を取得する
    load(key) {
        return this.memory.get(key) ?? null;
    }

    // 値を削除する
    remove(key) {
        if (this.memory.has(key)) {
            this.memory.delete(key);
            return true;
        }
        return false;
    }

    // 状態をアーカイブ化（沈黙へ移行）
    archiveState(state) {
        this.archive.push({
            timestamp: Date.now(),
            state: JSON.parse(JSON.stringify(state))
        });
        return true;
    }

    // アーカイブの読み出し
    getArchive(index = null) {
        if (index === null) return this.archive;
        return this.archive[index] ?? null;
    }

    // 全ストレージのリセット
    reset() {
        this.memory.clear();
        this.archive = [];
    }
}

// 単一インスタンスとしてエクスポート
const storage = new Storage();
export default storage;