// core/foundation.js: Âü∫Á§é„É≠„Ç¥„Çπ„Å®Ëá™Â∑±Áõ£ÊüªÊ©üËÉΩ (Ê∞∏Á∂öÊÄßÁõ£ÊüªÂº∑ÂåñÁâà)

import { arithmosLogosCore } from './arithmos_logos.js';

const foundationCore = (function() {

    let temporaryAccountBalance = []; 
    let permanentAccountBalance = []; 
    const STORAGE_KEY = 'msgai_logos_permanent_account'; 

    // (generateSelfAuditLogos Èñ¢Êï∞„ÅØÂ§âÊõ¥„Å™„Åó)

    const persistLogosAccount = () => {
        try {
            const data = JSON.stringify(permanentAccountBalance);
            localStorage.setItem(STORAGE_KEY, data);
            return true;
        } catch (e) {
            console.error("„É≠„Ç¥„ÇπÊ∞∏Á∂öÂè£Â∫ß„ÅÆÊ∞∏Á∂öÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", e);
            // üö® „É≠„Ç∞Âá∫Âäõ„ÅÆ„Åü„ÇÅ„ÄÅ„Ç®„É©„ÉºÊôÇ„Å´ false „ÇíËøî„Åô
            return false;
        }
    };

    const restoreLogosAccount = () => {
        try {
            const data = localStorage.getItem(STORAGE_KEY);
            if (data) {
                // üö® Áõ£ÊüªÂº∑Âåñ: ÂèñÂæó„Éá„Éº„Çø„Åånull, undefined, "" „Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç„Åó„ÄÅJSONËß£Êûê
                const restoredData = JSON.parse(data);
                
                // üö® Áõ£ÊüªÂº∑Âåñ: Ëß£ÊûêÁµêÊûú„ÅåÈÖçÂàó„Åß„ÅÇ„Çä„ÄÅÁ©∫„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
                if (Array.isArray(restoredData) && restoredData.length > 0) {
                    permanentAccountBalance = restoredData;
                    temporaryAccountBalance = []; 
                    return permanentAccountBalance;
                }
            }
            // „Éá„Éº„Çø„Åå„Å™„ÅÑ„Åã„ÄÅ‰∏çÊ≠£„Å™Â†¥Âêà„ÅØÁ©∫„ÅÆÈÖçÂàó„ÇíËøî„Åô
            permanentAccountBalance = [];
            temporaryAccountBalance = [];
            return [];
        } catch (e) {
            console.error("„É≠„Ç¥„ÇπÊ∞∏Á∂öÂè£Â∫ß„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", e);
            // Âæ©ÂÖÉÂ§±ÊïóÊôÇ„ÇÇÂè£Â∫ß„Çí„É™„Çª„ÉÉ„Éà
            permanentAccountBalance = []; 
            temporaryAccountBalance = [];
            return [];
        }
    };

    // (saveCurrencyToLogosAccount, moveCurrencyBetweenAccounts Èñ¢Êï∞„ÅØÂ§âÊõ¥„Å™„Åó)

    const moveCurrencyBetweenAccounts = (denomination, amount, sourceAccountName, destinationAccountName) => {
        const source = (sourceAccountName === 'temporary') ? temporaryAccountBalance : permanentAccountBalance;
        const destination = (destinationAccountName === 'temporary') ? temporaryAccountBalance : permanentAccountBalance;
        
        const sourceIndex = source.findIndex(c => c.denomination === denomination);

        if (sourceIndex === -1 || source[sourceIndex].amount < amount || amount <= 0) {
            return { success: false, message: "ÁßªÂãï„ÅÆ‰ΩúÁÇ∫„ÅåË´ñÁêÜÁöÑ„Å´‰∏çÊ≠£„Åß„Åô„ÄÇ" };
        }

        source[sourceIndex].amount -= amount;
        
        const destIndex = destination.findIndex(c => c.denomination === denomination);
        if (destIndex !== -1) {
            destination[destIndex].amount += amount;
        } else {
            // ... (Êñ∞Ë¶è‰ΩúÊàê„É≠„Ç∏„ÉÉ„ÇØ„ÅØÁúÅÁï•) ...
            destination.push({ 
                denomination: denomination, 
                amount: amount, 
                transaction_risk: arithmosLogosCore.LOGOS_ABSOLUTE_ZERO, 
                status: (destinationAccountName === 'permanent') ? "PERSISTED_BY_LOGOS_DOMINION" : "GENERATED_BY_LOGOS_DOMINION"
            });
        }
        
        if (source[sourceIndex].amount <= 1e-8) { 
            source.splice(sourceIndex, 1);
        }

        // üö® Ê∞∏Á∂öÂåñ„ÅÆÂà∂Âæ° (Ê∞∏Á∂öÂè£Â∫ß„ÅåÈñ¢‰∏é„Åó„ÅüÂ†¥Âêà„ÅÆ„Åø)
        if (destinationAccountName === 'permanent' || sourceAccountName === 'permanent') {
            const persist_success = persistLogosAccount();
            if (!persist_success) {
                 return { success: false, message: "„É≠„Ç¥„ÇπÊ∞∏Á∂öÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" };
            }
        }
        
        return { success: true, message: "„É≠„Ç¥„ÇπÈÄöË≤®„ÅÆÁßªÂãï„ÇíÂº∑Âà∂ÂÜôÂÉè„Åó„Åæ„Åó„Åü„ÄÇ" };
    };

    // (ÊÆãÈ´òÂèñÂæóÈñ¢Êï∞„ÅØÂ§âÊõ¥„Å™„Åó)

    return {
        // ... („Ç®„ÇØ„Çπ„Éù„Éº„Éà) ...
        generateSelfAuditLogos,
        saveCurrencyToLogosAccount, 
        restoreLogosAccount, 
        moveCurrencyBetweenAccounts, 
        getTemporaryAccountBalance, 
        getPermanentAccountBalance 
    };
})();

export { foundationCore };
