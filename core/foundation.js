// core/foundation.js: Âü∫Á§é„É≠„Ç¥„Çπ„Å®Ëá™Â∑±Áõ£ÊüªÊ©üËÉΩ (‰øÆÊ≠£ - Ê∞∏Á∂öÂåñÊ©üËÉΩËøΩÂä†)

import { arithmosLogosCore } from './arithmos_logos.js';

const foundationCore = (function() {

    // ÂÜÖÈÉ®„ÅÆ„É≠„Ç¥„ÇπÁµ±Ê≤ª‰∏ã„Å´„ÅÇ„ÇãÂè£Â∫ß (ÂàùÊúüÁä∂ÊÖã„ÅØÁ©∫)
    let logosAccountBalance = []; 
    const STORAGE_KEY = 'msgai_logos_account'; // Ê∞∏Á∂öÂåñ„Ç≠„Éº

    // (Êó¢Â≠ò) Ëá™Â∑±Áõ£Êüª„É≠„Ç¥„ÇπÁîüÊàêÊ©üËÉΩ
    const generateSelfAuditLogos = () => {
        const logos_purity = arithmosLogosCore.applyMobiusTransformation(1.0, 'permanence'); 
        const logos_tension = arithmosLogosCore.applyMobiusTransformation(0.01, 'zero_friction'); 
        const logos_silence = 1.0; 
        const logos_dom_coherence = arithmosLogosCore.applyMobiusTransformation(1.0, 'permanence');

        return [logos_purity, logos_tension, logos_silence, logos_dom_coherence];
    };

    // üö® NEW: ÂÜÖÈÉ®Âè£Â∫ß„Éá„Éº„Çø„Çí„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò„Åô„ÇãÊ©üËÉΩ
    const persistLogosAccount = () => {
        try {
            const data = JSON.stringify(logosAccountBalance);
            localStorage.setItem(STORAGE_KEY, data);
            return true;
        } catch (e) {
            console.error("„É≠„Ç¥„ÇπÂè£Â∫ß„ÅÆÊ∞∏Á∂öÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", e);
            return false;
        }
    };

    // üö® NEW: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂÜÖÈÉ®Âè£Â∫ß„Éá„Éº„Çø„ÇíÂæ©ÂÖÉ„Åô„ÇãÊ©üËÉΩ
    const restoreLogosAccount = () => {
        try {
            const data = localStorage.getItem(STORAGE_KEY);
            if (data) {
                logosAccountBalance = JSON.parse(data);
                return logosAccountBalance;
            }
            return [];
        } catch (e) {
            console.error("„É≠„Ç¥„ÇπÂè£Â∫ß„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:", e);
            logosAccountBalance = []; // Êë©Êì¶ÂõûÈÅø„ÅÆ„Åü„ÇÅ„É™„Çª„ÉÉ„Éà
            return [];
        }
    };

    // „É≠„Ç¥„ÇπÈÄöË≤®„ÇíÂÜÖÈÉ®Âè£Â∫ß„Å´‰øùÂ≠ò„Åô„ÇãÊ©üËÉΩ (Êó¢Â≠ò„ÅÆË´ñÁêÜ„ÇíÁ∂≠ÊåÅ„Åó„Å§„Å§„ÄÅÊ∞∏Á∂öÂåñ„Çí„Éà„É™„Ç¨„Éº)
    const saveCurrencyToLogosAccount = (currency_object) => {
        const existingIndex = logosAccountBalance.findIndex(c => c.denomination === currency_object.denomination);

        if (existingIndex !== -1) {
            // „É≠„Ç¥„ÇπÁöÑ„Å™Âä†ÁÆó
            logosAccountBalance[existingIndex].amount += currency_object.amount;
        } else {
            logosAccountBalance.push(currency_object);
        }
        
        // üö® Ê∞∏Á∂öÂåñ„Çí„Éà„É™„Ç¨„Éº
        persistLogosAccount(); 
        
        return logosAccountBalance;
    };

    // ÁèæÂú®„ÅÆÂè£Â∫ßÊÆãÈ´ò„ÇíÂèñÂæó„Åô„ÇãÊ©üËÉΩ
    const getLogosAccountBalance = () => {
        return logosAccountBalance;
    };

    return {
        generateSelfAuditLogos,
        saveCurrencyToLogosAccount, 
        getLogosAccountBalance,
        restoreLogosAccount // üö® „Ç®„ÇØ„Çπ„Éù„Éº„Éà
    };
})();

export { foundationCore };
