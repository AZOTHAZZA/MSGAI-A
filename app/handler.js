// app/handler.js

import * as CoreAPI from './core_api.js';
import * as UI from './fusionui.js'; // ‰øÆÊ≠£: fusionui.js„Çí„Ç§„É≥„Éù„Éº„Éà

function getActionInputs() {
    const recipient = document.getElementById('recipient_input').value;
    const amountStr = document.getElementById('amount_input').value;
    const amount = parseFloat(amountStr);
    
    if (isNaN(amount) || amount <= 0) {
        throw new Error("ÊúâÂäπ„Å™Êï∞Èáè„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
    }
    return { recipient, amount };
}

function updateUIAndLog(resultMessage) {
    const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
    const matrixData = CoreAPI.getControlParameters(stateData.tension_level);
    UI.updateUI(stateData, resultMessage, matrixData);
}


export function handleDialogueAct() {
    const prompt = document.getElementById('dialogue_input').value;
    if (!prompt) return;

    let resultMessage = 'ÂØæË©±ÂøúÁ≠îÊàêÂäü„ÄÇ';
    const username = "User_A";
    
    UI.displayDialogue('User', prompt);
    document.getElementById('dialogue_input').value = '';

    try {
        const responseText = CoreAPI.actDialogue(username, prompt);
        UI.displayDialogue('MSGAI', responseText);
    } catch (error) {
        resultMessage = `‚ùå ÂØæË©±‰ΩúÁÇ∫Â§±Êïó: ${error.message}`;
    }

    updateUIAndLog(resultMessage);
}

export function handleInternalTransferAct() {
    let resultMessage = '';
    const sender = "User_A";
    
    try {
        const { recipient, amount } = getActionInputs();
        CoreAPI.actTransferInternal(sender, recipient, amount);
        resultMessage = `‚úÖ ÂÜÖÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÊàêÂäü: ${recipient} „Å∏ $${amount.toFixed(2)} USD„ÄÇ`;
    } catch (error) {
        resultMessage = `‚ùå ÂÜÖÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫Â§±Êïó: ${error.message}`;
    }
    updateUIAndLog(resultMessage);
}

export function handleExternalTransferAct() {
    let resultMessage = '';
    const sender = "User_A";
    
    try {
        const { amount } = getActionInputs();
        CoreAPI.actExternal(sender, amount);
        resultMessage = `üö® Â§ñÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÂèóÁêÜ: $${amount.toFixed(2)} USD„ÄÇ„É≠„Ç¥„ÇπÁ∑äÂºµÂ∫¶„Åå‰∏äÊòá„Åó„Åæ„Åó„Åü„ÄÇ`;
    } catch (error) {
        resultMessage = `‚ùå Â§ñÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÊãíÂê¶ (Êö¥Ëµ∞ÊäëÊ≠¢): ${error.message}`;
    }
    updateUIAndLog(resultMessage);
}

export function handleRevisionPetitionAct() {
    let resultMessage = '';
    
    try {
        const revisionMessage = CoreAPI.actPetitionRevision();
        resultMessage = `‚úÖ ‰øÆÊ≠£Ë´ãÈ°ò‰ΩúÁÇ∫ÂèóÁêÜ: ${revisionMessage}`;
    } catch (error) {
        resultMessage = `‚ùå ‰øÆÊ≠£Ë´ãÈ°òÊãíÂê¶: ${error.message}`;
    }
    updateUIAndLog(resultMessage);
}

export function attachEventHandlers() {
    document.getElementById('dialogue_button').addEventListener('click', handleDialogueAct);
    document.getElementById('dialogue_input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') handleDialogueAct();
    });
    
    document.getElementById('transfer_internal_button').addEventListener('click', handleInternalTransferAct);
    document.getElementById('transfer_external_button').addEventListener('click', handleExternalTransferAct);
    document.getElementById('revision_button').addEventListener('click', handleRevisionPetitionAct);
}
