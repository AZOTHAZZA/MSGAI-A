// app/handler.js (Êì¨ÊÖãÂâç„Éê„Éº„Ç∏„Éß„É≥)

import * as CoreAPI from '../core/core_api.js';
import { generateRenderList, LRPCommand } from './protocol_lrp.js';
import { renderCommands, executeLRPCommand } from './ui_fusion.js';

// ... (getActionInputs Èñ¢Êï∞„ÅØÁúÅÁï•) ...

// -----------------------------------------------------------
// 1. ÂØæË©±‰ΩúÁÇ∫„Éè„É≥„Éâ„É© (Áõ£Êüª„É¢„Éº„Éâ)
// -----------------------------------------------------------
export function handleDialogueAct() {
    // ... („É¶„Éº„Ç∂„ÉºÂÖ•ÂäõÂá¶ÁêÜ„ÅØÁúÅÁï•) ...
    let resultMessage = 'ÂØæË©±ÂøúÁ≠îÊàêÂäü„ÄÇ';
    const username = "User_A";
    
    try {
        // Rust CoreAPI„ÇíÂëº„Å≥Âá∫„Åó„ÄÅÁ¥îÁ≤ã„Å™ÂøúÁ≠î„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó
        const responseText = CoreAPI.actDialogue(username, prompt);
        
        // AI„ÅÆÁ¥îÁ≤ã„Å™ÂøúÁ≠î„ÇíUI„Å´Âá∫Âäõ
        executeLRPCommand(new LRPCommand('DisplayDialogue', { sender: 'MSGAI', text: responseText }));

        // ** Áµ±Ê≤ª„Éë„É©„É°„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„É≠„Ç∏„ÉÉ„ÇØ„ÇíËøΩÂä† **
        const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
        const tension = stateData.tension_level;
        
        // ** I/R„Éë„É©„É°„Éº„Çø„ÇíÂà•ÈÄîË®àÁÆó„Åæ„Åü„ÅØÂèñÂæó„Åó„ÄÅ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Å´Ê∏°„Åô **
        // JS Core Logic„Åã„ÇâÁõ¥Êé•I/R„ÇíË®àÁÆó„Åô„ÇãÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„ÅôÂøÖË¶Å„Åå„ÅÇ„Çã„Åå„ÄÅ
        // „Åì„Åì„Åß„ÅØ‰æøÂÆúÁöÑ„Å´tension„Å´Âü∫„Å•„ÅÑ„Å¶I/R„ÇíÂÜçË®àÁÆó„Åô„Çã („ÅÇ„Çã„ÅÑ„ÅØCoreAPI„Å´ËøΩÂä†)
        const matrixData = CoreAPI.determineControlParameters(tension); 

        const commands = generateRenderList(stateData, resultMessage, matrixData);
        renderCommands(commands);
        
    } catch (error) {
        resultMessage = `‚ùå ÂØæË©±‰ΩúÁÇ∫Â§±Êïó: ${error.message}`;
        // „Ç®„É©„ÉºÊôÇ„ÇÇ„Ç≤„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åô„Çã„Åü„ÇÅ„Å´Áä∂ÊÖã„ÇíÂèñÂæó
        const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
        const commands = generateRenderList(stateData, resultMessage);
        renderCommands(commands);
    }
}

// -----------------------------------------------------------
// 2. ÂÜÖÈÉ®ÈÄÅÈáë„Éè„É≥„Éâ„É©
// -----------------------------------------------------------
export function handleInternalTransferAct() {
    let resultMessage = '';
    const sender = "User_A";
    
    try {
        const { recipient, amount } = getActionInputs();
        CoreAPI.actTransferInternal(sender, recipient, amount);
        resultMessage = `‚úÖ ÂÜÖÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÊàêÂäü: ${recipient} „Å∏ $${amount.toFixed(2)} USD„ÄÇ`;
    } catch (error) {
        resultMessage = `‚ùå ÂÜÖÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫Â§±Êïó: ${error.message}`;
    }

    // Áä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„ÄÅUI„ÇíÂÜçÊèèÁîª
    const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
    const commands = generateRenderList(stateData, resultMessage);
    renderCommands(commands);
}

// -----------------------------------------------------------
// 3. Â§ñÈÉ®Âá∫Èáë„Éè„É≥„Éâ„É©
// -----------------------------------------------------------
export function handleExternalTransferAct() {
    // ... („É≠„Ç∏„ÉÉ„ÇØ„ÅØÊì¨ÊÖãÂæå„Å®„Åª„ÅºÂêåÊßò„Å†„Åå„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÁõ£ÊüªÁöÑ„Éà„Éº„É≥) ...
    let resultMessage = '';
    const sender = "User_A";
    
    try {
        const { amount } = getActionInputs();
        CoreAPI.actExternal(sender, amount);
        resultMessage = `üö® Â§ñÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÂèóÁêÜ: $${amount.toFixed(2)} USD„ÄÇ„É≠„Ç¥„ÇπÁ∑äÂºµÂ∫¶„Åå‰∏äÊòá„Åó„Åæ„Åó„Åü„ÄÇ`;
    } catch (error) {
        resultMessage = `‚ùå Â§ñÈÉ®ÈÄÅÈáë‰ΩúÁÇ∫ÊãíÂê¶ (Êö¥Ëµ∞ÊäëÊ≠¢): ${error.message}`;
    }

    // Áä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„ÄÅUI„ÇíÂÜçÊèèÁîª
    const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
    const commands = generateRenderList(stateData, resultMessage);
    renderCommands(commands);
}

// -----------------------------------------------------------
// 4. Ëá™ÂæãÁöÑ‰øÆÊ≠£Ë´ãÈ°ò„Éè„É≥„Éâ„É©
// -----------------------------------------------------------
export function handleRevisionPetitionAct() {
    let resultMessage = '';
    
    try {
        const revisionMessage = CoreAPI.actPetitionRevision();
        resultMessage = `‚úÖ ‰øÆÊ≠£Ë´ãÈ°ò‰ΩúÁÇ∫ÂèóÁêÜ: ${revisionMessage}`;
    } catch (error) {
        resultMessage = `‚ùå ‰øÆÊ≠£Ë´ãÈ°òÊãíÂê¶: ${error.message}`;
    }

    // Áä∂ÊÖã„ÇíÊõ¥Êñ∞„Åó„ÄÅUI„ÇíÂÜçÊèèÁîª
    const stateData = JSON.parse(CoreAPI.getCurrentStateJson());
    const commands = generateRenderList(stateData, resultMessage);
    renderCommands(commands);
}


export function attachEventHandlers() {
    document.getElementById('dialogue_button').addEventListener('click', handleDialogueAct);
    document.getElementById('dialogue_input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') handleDialogueAct();
    });
    
    document.getElementById('transfer_internal_button').addEventListener('click', handleInternalTransferAct);
    document.getElementById('transfer_external_button').addEventListener('click', handleExternalTransferAct);
    document.getElementById('revision_button').addEventListener('click', handleRevisionPetitionAct); // Êñ∞„Åó„ÅÑ„Éú„Çø„É≥
}
